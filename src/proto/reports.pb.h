/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_PROTO_REPORTS_PB_H_INCLUDED
#define PB_PROTO_REPORTS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _NodeSettingsReport {
    char firmware_version[33];
    char node_name[33];
    char node_contact[33];
    float location_lat;
    float location_long;
    bool location_auto_update_active;
    bool wifi_password_set;
    uint32_t wake_interval;
    pb_byte_t app_eui[8];
    pb_byte_t dev_eui[8];
    bool app_key_set;
    bool link_check_enabled;
    bool adr_enabled;
    uint32_t spreading_factor;
    int32_t tx_power;
} NodeSettingsReport;

typedef struct _Report {
    pb_size_t which_report;
    union {
        NodeSettingsReport nodeSettingsReport;
    } report;
} Report;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Report_init_default                      {0, {NodeSettingsReport_init_default}}
#define NodeSettingsReport_init_default          {"", "", "", 0, 0, 0, 0, 0, {0}, {0}, 0, 0, 0, 0, 0}
#define Report_init_zero                         {0, {NodeSettingsReport_init_zero}}
#define NodeSettingsReport_init_zero             {"", "", "", 0, 0, 0, 0, 0, {0}, {0}, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define NodeSettingsReport_firmware_version_tag  1
#define NodeSettingsReport_node_name_tag         2
#define NodeSettingsReport_node_contact_tag      3
#define NodeSettingsReport_location_lat_tag      4
#define NodeSettingsReport_location_long_tag     5
#define NodeSettingsReport_location_auto_update_active_tag 6
#define NodeSettingsReport_wifi_password_set_tag 7
#define NodeSettingsReport_wake_interval_tag     8
#define NodeSettingsReport_app_eui_tag           9
#define NodeSettingsReport_dev_eui_tag           10
#define NodeSettingsReport_app_key_set_tag       11
#define NodeSettingsReport_link_check_enabled_tag 12
#define NodeSettingsReport_adr_enabled_tag       13
#define NodeSettingsReport_spreading_factor_tag  14
#define NodeSettingsReport_tx_power_tag          15
#define Report_nodeSettingsReport_tag            1

/* Struct field encoding specification for nanopb */
#define Report_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (report,nodeSettingsReport,report.nodeSettingsReport),   1)
#define Report_CALLBACK NULL
#define Report_DEFAULT NULL
#define Report_report_nodeSettingsReport_MSGTYPE NodeSettingsReport

#define NodeSettingsReport_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   firmware_version,   1) \
X(a, STATIC,   SINGULAR, STRING,   node_name,         2) \
X(a, STATIC,   SINGULAR, STRING,   node_contact,      3) \
X(a, STATIC,   SINGULAR, FLOAT,    location_lat,      4) \
X(a, STATIC,   SINGULAR, FLOAT,    location_long,     5) \
X(a, STATIC,   SINGULAR, BOOL,     location_auto_update_active,   6) \
X(a, STATIC,   SINGULAR, BOOL,     wifi_password_set,   7) \
X(a, STATIC,   SINGULAR, UINT32,   wake_interval,     8) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, app_eui,           9) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, dev_eui,          10) \
X(a, STATIC,   SINGULAR, BOOL,     app_key_set,      11) \
X(a, STATIC,   SINGULAR, BOOL,     link_check_enabled,  12) \
X(a, STATIC,   SINGULAR, BOOL,     adr_enabled,      13) \
X(a, STATIC,   SINGULAR, UINT32,   spreading_factor,  14) \
X(a, STATIC,   SINGULAR, SINT32,   tx_power,         15)
#define NodeSettingsReport_CALLBACK NULL
#define NodeSettingsReport_DEFAULT NULL

extern const pb_msgdesc_t Report_msg;
extern const pb_msgdesc_t NodeSettingsReport_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Report_fields &Report_msg
#define NodeSettingsReport_fields &NodeSettingsReport_msg

/* Maximum encoded size of messages (where known) */
#define Report_size                              163
#define NodeSettingsReport_size                  160

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
