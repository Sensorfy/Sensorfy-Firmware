/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_PROTO_COMMANDS_PB_H_INCLUDED
#define PB_PROTO_COMMANDS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _SetConfigModeCommand {
    bool enabled;
} SetConfigModeCommand;

typedef struct _Command {
    pb_size_t which_command;
    union {
        SetConfigModeCommand setConfigModeCommand;
    } command;
} Command;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Command_init_default                     {0, {SetConfigModeCommand_init_default}}
#define SetConfigModeCommand_init_default        {0}
#define Command_init_zero                        {0, {SetConfigModeCommand_init_zero}}
#define SetConfigModeCommand_init_zero           {0}

/* Field tags (for use in manual encoding/decoding) */
#define SetConfigModeCommand_enabled_tag         1
#define Command_setConfigModeCommand_tag         1

/* Struct field encoding specification for nanopb */
#define Command_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,setConfigModeCommand,command.setConfigModeCommand),   1)
#define Command_CALLBACK NULL
#define Command_DEFAULT NULL
#define Command_command_setConfigModeCommand_MSGTYPE SetConfigModeCommand

#define SetConfigModeCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1)
#define SetConfigModeCommand_CALLBACK NULL
#define SetConfigModeCommand_DEFAULT NULL

extern const pb_msgdesc_t Command_msg;
extern const pb_msgdesc_t SetConfigModeCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Command_fields &Command_msg
#define SetConfigModeCommand_fields &SetConfigModeCommand_msg

/* Maximum encoded size of messages (where known) */
#define Command_size                             4
#define SetConfigModeCommand_size                2

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
